{"version":3,"file":"index.cjs.js","sources":["../src/actions/rundeck/rundeck.ts","../src/module.ts"],"sourcesContent":["import { createTemplateAction } from '@backstage/plugin-scaffolder-node';\nimport { Config } from '@backstage/config';\nimport { LoggerService } from '@backstage/backend-plugin-api';\nimport fetch from 'node-fetch';\nimport { z } from 'zod';\n\ninterface ActionOptions {\n  config: Config;\n  logger: LoggerService;\n}\n\nexport function createRundeckExecuteAction(options: ActionOptions) {\n  const { config } = options;\n\n  return createTemplateAction<{\n    jobId: string;\n    projectName: string;\n    parameters?: Record<string, string>;\n    waitForJob?: boolean;\n    timeout?: number;\n  }>({\n    id: 'rundeck:job:execute',\n    description: 'Executes a Rundeck job with optional parameters and wait for completion',\n    schema: {\n      input: z.object({\n        jobId: z.string().describe('The Rundeck job ID or UUID'),\n        projectName: z.string().describe('The Rundeck project name'),\n        parameters: z.record(z.string()).optional().describe('Job parameters as key-value pairs'),\n        waitForJob: z.boolean().optional().default(false).describe('Wait for job completion before continuing'),\n        timeout: z.number().optional().default(300).describe('Timeout in seconds when waiting for job completion'),\n      }),\n    },\n    async handler(ctx) {\n      const { jobId, projectName, parameters = {}, waitForJob = false, timeout = 300 } = ctx.input;\n      \n      try {\n        // Get Rundeck configuration from app-config.yaml\n        const rundeckUrl = config.getString('rundeck.url');\n        const apiToken = config.getString('rundeck.apiToken');\n        \n        if (!rundeckUrl || !apiToken) {\n          throw new Error('Rundeck URL and API token must be configured in app-config.yaml');\n        }\n\n        \n        // Build the execution request\n        const executionData: any = {\n          project: projectName,\n        };\n\n        // Add options if parameters are provided\n        if (Object.keys(parameters).length > 0) {\n          executionData.options = parameters;\n        }\n\n        // Execute the job\n        const response = await fetch(\n          `${rundeckUrl}/api/18/job/${jobId}/executions`,\n          {\n            method: 'POST',\n            headers: {\n              'X-Rundeck-Auth-Token': apiToken,\n              'Content-Type': 'application/json',\n              'Accept': 'application/json',\n            },\n            body: JSON.stringify(executionData),\n          }\n        );\n\n        if (!response.ok) {\n          const errorText = await response.text();\n          throw new Error(`Failed to execute Rundeck job: ${response.status} ${response.statusText} - ${errorText}`);\n        }\n\n        const result = await response.json() as any;\n        const executionId = result.id;\n        \n        \n        ctx.output('executionId', executionId);\n        ctx.output('rundeckUrl', `${rundeckUrl}/project/${projectName}/execution/show/${executionId}`);\n\n        if (waitForJob) {\n          \n          const startTime = Date.now();\n          let status = 'running';\n          \n          while ((status === 'running' || status === 'scheduled' || status === 'queued') && (Date.now() - startTime) < timeout * 1000) {\n            // Wait 5 seconds before checking status\n            await new Promise(resolve => setTimeout(resolve, 5000));\n            \n            const statusResponse = await fetch(\n              `${rundeckUrl}/api/18/execution/${executionId}`,\n              {\n                headers: {\n                  'X-Rundeck-Auth-Token': apiToken,\n                  'Accept': 'application/json',\n                },\n              }\n            );\n\n            if (statusResponse.ok) {\n              const statusData = await statusResponse.json() as any;\n              status = statusData.status;\n            } else {\n              ctx.logger?.warn(`Failed to check job status: ${statusResponse.status}`);\n            }\n          }\n          \n          if (status === 'running' || status === 'scheduled' || status === 'queued') {\n            ctx.output('status', 'timeout');\n          } else {\n            ctx.output('status', status);\n            \n            // Fetch execution logs\n            try {\n              let logResponse = await fetch(\n                `${rundeckUrl}/api/18/execution/${executionId}/output?format=json`,\n                {\n                  headers: {\n                    'X-Rundeck-Auth-Token': apiToken,\n                    'Accept': 'application/json',\n                  },\n                }\n              );\n              \n              let logs = '';\n              \n              if (logResponse.ok) {\n                const logData = await logResponse.json() as any;\n                \n                // Try multiple possible response formats\n                if (logData.entries && Array.isArray(logData.entries)) {\n                  logs = logData.entries.map((entry: any) => entry.log || entry.message || entry.content || entry.text).join('\\n');\n                } else if (logData.output) {\n                  logs = logData.output;\n                } else if (logData.log) {\n                  logs = logData.log;\n                } else if (typeof logData === 'string') {\n                  logs = logData;\n                } else {\n                  logs = JSON.stringify(logData, null, 2);\n                }\n              } else {\n                // Fallback to text format\n                logResponse = await fetch(\n                  `${rundeckUrl}/api/18/execution/${executionId}/output`,\n                  {\n                    headers: {\n                      'X-Rundeck-Auth-Token': apiToken,\n                      'Accept': 'text/plain',\n                    },\n                  }\n                );\n                \n                if (logResponse.ok) {\n                  logs = await logResponse.text();\n                }\n              }\n              \n              ctx.output('logs', logs);\n              \n            } catch (logError) {\n              ctx.output('logs', '');\n            }\n            \n            if (status === 'failed') {\n              throw new Error(`Rundeck job execution failed with status: ${status}`);\n            }\n          }\n        } else {\n          ctx.output('status', 'started');\n        }\n\n      } catch (error) {\n        ctx.logger?.error(`Error executing Rundeck job: ${error}`);\n        throw error;\n      }\n    },\n  });\n}","import { createBackendModule } from '@backstage/backend-plugin-api';\nimport { scaffolderActionsExtensionPoint } from '@backstage/plugin-scaffolder-node/alpha';\nimport { createRundeckExecuteAction } from './actions/rundeck/rundeck';\nimport { coreServices } from '@backstage/backend-plugin-api';\n\nexport default createBackendModule({\n  moduleId: 'rundeck',\n  pluginId: 'scaffolder',\n  register({ registerInit }) {\n    registerInit({\n      deps: {\n        scaffolder: scaffolderActionsExtensionPoint,\n        config: coreServices.rootConfig,\n        logger: coreServices.logger,\n      },\n      async init({ scaffolder, config, logger }) {\n        scaffolder.addActions(createRundeckExecuteAction({ config, logger }));\n      },\n    });\n  },\n});"],"names":["createTemplateAction","z","fetch","createBackendModule","scaffolderActionsExtensionPoint","coreServices"],"mappings":"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"}